// Fill out your copyright notice in the Description page of Project Settings.

#include "DronePawn.h"

#include "ImageUtils.h"
#include "Camera/CameraComponent.h"
#include "Components/SceneCaptureComponent2D.h"
#include "GameFramework/SpringArmComponent.h"
#include "Components/StaticMeshComponent.h"
#include "Components/ArrowComponent.h"
#include "Engine/TextureRenderTarget2D.h"
#include "Kismet/KismetMathLibrary.h"
#include "Runtime/Core/Public/Async/ParallelFor.h"
#include "Engine/GameInstance.h"
#include "Kismet/GameplayStatics.h"
#include "Engine/Engine.h"
// Sets default values
ADronePawn::ADronePawn() {
  // UE_LOG(LogTemp, Warning, TEXT("ADronePawn constructor"));

  PrimaryActorTick.bCanEverTick = true;

#if PLATFORM_WINDOWS
  CameraBufferCriticalSection   = std::make_unique<FWindowsCriticalSection>();
  DepthBufferCriticalSection    = std::make_unique<FWindowsCriticalSection>();
  SegBufferCriticalSection      = std::make_unique<FWindowsCriticalSection>();
  ColDepthBufferCriticalSection = std::make_unique<FWindowsCriticalSection>();
#else
  CameraBufferCriticalSection   = std::make_unique<FPThreadsCriticalSection>();
  DepthBufferCriticalSection    = std::make_unique<FPThreadsCriticalSection>();
  SegBufferCriticalSection      = std::make_unique<FPThreadsCriticalSection>();
  ColDepthBufferCriticalSection = std::make_unique<FPThreadsCriticalSection>();
#endif

  InstructionQueue = std::make_unique<TQueue<std::shared_ptr<FInstruction<ADronePawn>>>>();

  RootMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("RootMeshComponent"));

  SceneCaptureMeshHolder = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("SceneCaptureMeshHolder"));
  SceneCaptureMeshHolder->SetupAttachment(RootMeshComponent);
  SceneCaptureComponent2D = CreateDefaultSubobject<USceneCaptureComponent2D>(TEXT("SceneCaptureComponent2D"));
  SceneCaptureComponent2D->SetupAttachment(SceneCaptureMeshHolder);

  /* DepthSceneCaptureComponent2D = CreateDefaultSubobject<USceneCaptureComponent2D>(TEXT("SceneCaptureComponent2D")); */
  /* DepthSceneCaptureComponent2D->SetupAttachment(SceneCaptureMeshHolder); */

  ThirdPersonCameraSpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("ThirdPersonCameraSpringArm"));
  ThirdPersonCameraSpringArm->SetupAttachment(RootComponent);
  ThirdPersonCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("ThirdPersonCamera"));
  ThirdPersonCamera->SetupAttachment(ThirdPersonCameraSpringArm);


  LidarConfig.ShowBeams = DEFAULT_LIDAR_SHOW_BEAMS;

  LidarConfig.BeamHorRays  = DEFAULT_LIDAR_BEAM_HOR;
  LidarConfig.BeamVertRays = DEFAULT_LIDAR_BEAM_VER;
  LidarConfig.Frequency    = 10;

  LidarConfig.BeamLength  = DEFAULT_LIDAR_BEAM_LENGTH;
  LidarConfig.Offset      = FVector(0, 0, 6);
  LidarConfig.Orientation = FRotator(0, 90, 0);
  LidarConfig.FOVVert     = 45.0; 
  LidarConfig.FOVHor      = 360.0;
  LidarConfig.vertRayDiff = (double) LidarConfig.FOVVert/ (double)(LidarConfig.BeamVertRays - 1.0);
  LidarConfig.horRayDif   = (double) LidarConfig.FOVHor / (double)LidarConfig.BeamHorRays;
  FTimerHandle OusterTimerHandle;


#if PLATFORM_WINDOWS
  LidarHitsCriticalSection    = std::make_unique<FWindowsCriticalSection>();
  LidarSegHitsCriticalSection = std::make_unique<FWindowsCriticalSection>();
#else
  LidarHitsCriticalSection      = std::make_unique<FPThreadsCriticalSection>();
  LidarSegHitsCriticalSection   = std::make_unique<FPThreadsCriticalSection>();
#endif
  LidarHits     = std::make_unique<std::vector<std::tuple<double, double, double, double>>>(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  LidarSegHits  = std::make_unique<std::vector<std::tuple<double, double, double, double, int>>>(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  LidarHitStart = std::make_unique<FVector>();
  LidarHitStart = std::make_unique<FVector>();

  droneServer = std::make_shared<DroneServer>(*this);
}

// Called when the game starts or when spawned
void ADronePawn::BeginPlay() {
  Super::BeginPlay();

  // TODO check https://github.com/TimmHess/UnrealImageCapture


  RenderTarget2D = NewObject<UTextureRenderTarget2D>();
  RenderTarget2D->InitCustomFormat(640, 480, PF_B8G8R8A8, false);
  RenderTarget2D->RenderTargetFormat = RTF_RGBA8;
  RenderTarget2D->bGPUSharedFlag     = true;

  RenderTargetDepth = NewObject<UTextureRenderTarget2D>();
  RenderTargetDepth->InitCustomFormat(640, 480, PF_FloatRGBA, false);
  RenderTargetDepth->bGPUSharedFlag = true;

  RenderTargetSeg = NewObject<UTextureRenderTarget2D>();
  RenderTargetSeg->InitCustomFormat(640, 480, PF_B8G8R8A8, false);
  RenderTargetSeg->RenderTargetFormat = RTF_RGBA8;
  RenderTargetSeg->bGPUSharedFlag     = true;

  RenderTargetColDepth = NewObject<UTextureRenderTarget2D>();
  RenderTargetColDepth->InitCustomFormat(640, 480, PF_B8G8R8A8, false);
  RenderTargetColDepth->RenderTargetFormat = RTF_RGBA8;
  RenderTargetColDepth->bGPUSharedFlag     = true;

  SceneCaptureComponent2D->CaptureSource = SCS_FinalColorHDR;
  SceneCaptureComponent2D->TextureTarget = RenderTarget2D;
  SceneCaptureComponent2D->ShowFlags.SetTemporalAA(true);
  SceneCaptureComponent2D->bAlwaysPersistRenderingState = true;

  SceneCaptureComponent2D->bCaptureEveryFrame = false;
  SceneCaptureComponent2D->bCaptureOnMovement = false;

  FCameraConfig CameraConfig;
  CameraConfig.ShowCameraComponent = false;
  CameraConfig.Offset              = FVector(14.9, 0, 0);
  CameraConfig.Orientation         = FRotator(0, 0, 0);
  CameraConfig.FOVAngle            = 90;
  CameraConfig.Width               = 640;
  CameraConfig.Height              = 480;
  SetCameraConfig(CameraConfig);

  /* DepthSceneCaptureComponent2D->CaptureSource = SCS_SceneDepth; */
  /* DepthSceneCaptureComponent2D->TextureTarget = RenderTargetDepth; */
  /* DepthSceneCaptureComponent2D->ShowFlags.SetTemporalAA(true); */
  /* DepthSceneCaptureComponent2D->bAlwaysPersistRenderingState = true; */

  /* DepthSceneCaptureComponent2D->bCaptureEveryFrame = false; */
  /* DepthSceneCaptureComponent2D->bCaptureOnMovement = false; */


  /* if (CameraConfig.SemanticSegmentation) { */
  /*   /1* create a new render target for the semantic segmentation *1/ */
  /*   RenderTargetSemanticSegmentation = NewObject<UTextureRenderTarget2D>(); */
  /*   RenderTargetSemanticSegmentation->InitCustomFormat(640, 480, PF_B8G8R8A8, true); */
  /*   RenderTargetSemanticSegmentation->RenderTargetFormat = RTF_RGBA8; */
  /*   RenderTargetSemanticSegmentation->bGPUSharedFlag     = true; */
  /*   /1* Creare a new scene capture component for the semantic segmentation *1/ */
  /*   SceneCaptureComponentSemanticSegmentation = CreateDefaultSubobject<USceneCaptureComponent2D>(TEXT("SceneCaptureComponentSemanticSegmentation")); */
  /*   SceneCaptureComponentSemanticSegmentation->SetupAttachment(SceneCaptureMeshHolder); */
  /*   SceneCaptureComponentSemanticSegmentation->CaptureSource = SCS_FinalColorLDR; */
  /*   SceneCaptureComponentSemanticSegmentation->TextureTarget = RenderTargetSemanticSegmentation; */
  /*   SceneCaptureComponentSemanticSegmentation->ShowFlags.SetTemporalAA(true); */
  /*   SceneCaptureComponentSemanticSegmentation->bAlwaysPersistRenderingState = true; */
  /*   SceneCaptureComponentSemanticSegmentation->bCaptureEveryFrame = false; */
  /*   SceneCaptureComponentSemanticSegmentation->bCaptureOnMovement = false; */

  /* } */
}

void ADronePawn::StartServer() {
  // UE_LOG(LogTemp, Warning, TEXT("Starting drone server"));
  droneServer->Run();
}


void ADronePawn::EndPlay(const EEndPlayReason::Type EndPlayReason) {
  CameraBuffer.Empty();
  DepthBuffer.Empty();
  droneServer->Stop();
}

// Called to bind functionality to input
void ADronePawn::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) {
  Super::SetupPlayerInputComponent(PlayerInputComponent);
}

void ADronePawn::UpdateLidar(bool isExternallyLocked) {
  /* TODO(DAVID): add random noise to the sensor to simulate real performance, additionaly can it be dependant on the current simulated weather?*/
  if (!isExternallyLocked) {
    LidarHitsCriticalSection->Lock();
  }

  auto       World        = GetWorld();
  const auto Start        = GetActorLocation() + GetActorRotation().RotateVector(LidarConfig.Offset);
  const auto Base2DVector = UKismetMathLibrary::GetRotated2D(FVector2D(0, -1), LidarConfig.FOVHor);
  /* const auto AngleStep    = ((-2) * LidarConfig.Angle) / (LidarConfig.BeamCount - 1); */

  auto       rotationOuster = GetActorRotation();
  const auto droneTransform = GetActorTransform();
  auto       forwardVec     = GetActorForwardVector();
  auto       rightVector    = GetActorRightVector();
  auto       upVec          = GetActorUpVector();

  LidarHits = std::make_unique<std::vector<std::tuple<double, double, double, double>>>(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  ParallelFor(LidarConfig.BeamHorRays, [&](int32 row) {
    FVector rotatedForward = forwardVec.RotateAngleAxis(LidarConfig.horRayDif * row, upVec);
    FVector rotatedRight   = rightVector.RotateAngleAxis(LidarConfig.horRayDif * row, upVec);
    ParallelFor(LidarConfig.BeamVertRays, [&](int32 col) {
      auto CollisionParams = FCollisionQueryParams::DefaultQueryParam;
      if (LidarConfig.ShowBeams) {
        const FName TraceTag(FString::Printf(TEXT("LidarTraceTag_%d"), 0));
        CollisionParams.TraceTag = TraceTag;
        /* World->DebugDrawTraceTag = TraceTag; */
      }
      FVector raycastAngle = rotatedForward.RotateAngleAxis(LidarConfig.vertRayDiff * col - LidarConfig.FOVVert /2, rotatedRight);
      raycastAngle *= LidarConfig.BeamLength;

      FHitResult HitResult;
      if (World->LineTraceSingleByChannel(HitResult, Start, Start + raycastAngle, ECollisionChannel::ECC_Visibility, CollisionParams)) {
        int i = row * LidarConfig.BeamVertRays + col;
        if (HitResult.bBlockingHit) {
          std::get<0>((*LidarHits)[i])  = HitResult.IsValidBlockingHit() ? HitResult.Distance : LidarConfig.BeamLength;
          const auto ray_in_drone_coord = droneTransform.InverseTransformVector(raycastAngle);
          std::get<1>((*LidarHits)[i])  = ray_in_drone_coord.X;
          std::get<2>((*LidarHits)[i])  = ray_in_drone_coord.Y;
          std::get<3>((*LidarHits)[i])  = ray_in_drone_coord.Z;
        } else {
          std::get<0>((*LidarHits)[i])  = -1;
          const auto ray_in_drone_coord = droneTransform.InverseTransformVector(raycastAngle);
          std::get<1>((*LidarHits)[i])  = ray_in_drone_coord.X;
          std::get<2>((*LidarHits)[i])  = ray_in_drone_coord.Y;
          std::get<3>((*LidarHits)[i])  = ray_in_drone_coord.Z;
        }
      }
    });
  });
  LidarHitStart.reset(new FVector(Start));

  if (!isExternallyLocked) {
    LidarHitsCriticalSection->Unlock();
  }
}

void ADronePawn::UpdateSegLidar(bool isExternallyLocked) {
  if (!isExternallyLocked) {
    LidarSegHitsCriticalSection->Lock();
  }

  auto       World        = GetWorld();
  const auto Start        = GetActorLocation() + GetActorRotation().RotateVector(LidarConfig.Offset);
  const auto Base2DVector = UKismetMathLibrary::GetRotated2D(FVector2D(0, -1), LidarConfig.FOVHor);

  auto       rotationOuster = GetActorRotation();
  const auto droneTransform = GetActorTransform();
  auto       forwardVec     = GetActorForwardVector();
  auto       rightVector    = GetActorRightVector();
  auto       upVec          = GetActorUpVector();
  LidarSegHits = std::make_unique<std::vector<std::tuple<double, double, double, double, int>>>(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  ParallelFor(LidarConfig.BeamHorRays, [&](int32 row) {
    FVector rotatedForward = forwardVec.RotateAngleAxis(LidarConfig.horRayDif * row, upVec);
    FVector rotatedRight   = rightVector.RotateAngleAxis(LidarConfig.horRayDif * row, upVec);
    ParallelFor(LidarConfig.BeamVertRays, [&](int32 col) {
      auto    CollisionParams = FCollisionQueryParams::DefaultQueryParam;
      FVector raycastAngle    = rotatedForward.RotateAngleAxis(LidarConfig.vertRayDiff * col - LidarConfig.FOVVert /2, rotatedRight);
      raycastAngle *= LidarConfig.BeamLength;

      FHitResult HitResult;
      if (World->LineTraceSingleByChannel(HitResult, Start, Start + raycastAngle, ECollisionChannel::ECC_Visibility, CollisionParams)) {
        int i = row * LidarConfig.BeamVertRays + col;
        if (HitResult.bBlockingHit) {
          std::get<0>((*LidarSegHits)[i]) = HitResult.IsValidBlockingHit() ? HitResult.Distance : LidarConfig.BeamLength;
          const auto ray_in_drone_coord   = droneTransform.InverseTransformVector(raycastAngle);
          std::get<1>((*LidarSegHits)[i]) = ray_in_drone_coord.X;
          std::get<2>((*LidarSegHits)[i]) = ray_in_drone_coord.Y;
          std::get<3>((*LidarSegHits)[i]) = ray_in_drone_coord.Z;
          auto component                  = Cast<UStaticMeshComponent>(HitResult.GetComponent());
          if (HitResult.GetComponent()->GetName().Contains("Landscape")) {
            std::get<4>((*LidarSegHits)[i]) = 1;
          } else {
            std::get<4>((*LidarSegHits)[i]) = component->CustomDepthStencilValue;
          }
        } else {
          std::get<0>((*LidarSegHits)[i]) = -1;
          const auto ray_in_drone_coord   = droneTransform.InverseTransformVector(raycastAngle);
          std::get<1>((*LidarSegHits)[i]) = ray_in_drone_coord.X;
          std::get<2>((*LidarSegHits)[i]) = ray_in_drone_coord.Y;
          std::get<3>((*LidarSegHits)[i]) = ray_in_drone_coord.Z;
          std::get<4>((*LidarSegHits)[i]) = -1;
        }
      }
    });
  });
  LidarHitStart.reset(new FVector(Start));

  if (!isExternallyLocked) {
    LidarSegHitsCriticalSection->Unlock();
  }
}

void ADronePawn::GetLidarHits(std::vector<Serializable::Drone::GetLidarData::LidarData>& OutLidarData, FVector& OutStart) {
  LidarHitsCriticalSection->Lock();
  if (!LidarConfig.ShowBeams) {
    UpdateLidar(true);
  }

  OutLidarData.resize(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  for (int i = 0; i < LidarConfig.BeamHorRays * LidarConfig.BeamVertRays; i++) {
    OutLidarData[i].distance   = std::get<0>((*LidarHits)[i]);
    OutLidarData[i].directionX = std::get<1>((*LidarHits)[i]);
    OutLidarData[i].directionY = std::get<2>((*LidarHits)[i]);
    OutLidarData[i].directionZ = std::get<3>((*LidarHits)[i]);
  }
  OutStart.X = LidarConfig.Offset.X;
  OutStart.Y = LidarConfig.Offset.Y;
  OutStart.Z = LidarConfig.Offset.Z;
  LidarHitsCriticalSection->Unlock();
}

void ADronePawn::GetSegLidarHits(std::vector<Serializable::Drone::GetLidarSegData::LidarSegData>& OutLidarSegData, FVector& OutStart) {
  LidarSegHitsCriticalSection->Lock();
  if (!LidarConfig.ShowBeams) {
    UpdateSegLidar(true);
  }
  OutLidarSegData.resize(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  for (int i = 0; i < LidarConfig.BeamHorRays * LidarConfig.BeamVertRays; i++) {
    OutLidarSegData[i].distance     = std::get<0>((*LidarSegHits)[i]);
    OutLidarSegData[i].directionX   = std::get<1>((*LidarSegHits)[i]);
    OutLidarSegData[i].directionY   = std::get<2>((*LidarSegHits)[i]);
    OutLidarSegData[i].directionZ   = std::get<3>((*LidarSegHits)[i]);
    OutLidarSegData[i].segmentation = std::get<4>((*LidarSegHits)[i]);
  }
  OutStart.X = LidarConfig.Offset.X;
  OutStart.Y = LidarConfig.Offset.Y;
  OutStart.Z = LidarConfig.Offset.Z;
  LidarSegHitsCriticalSection->Unlock();
}

void ADronePawn::UpdateCamera(bool isExternallyLocked, int type = 1) {
  switch (type) {
    case CAMERA_MODE_NONE: {
      SceneCaptureComponent2D->CaptureSource = SCS_FinalColorLDR;
      SceneCaptureComponent2D->TextureTarget = RenderTarget2D;
      break;
    }
    case CAMERA_MODE_COLOR: {
      if (!isExternallyLocked) {
        CameraBufferCriticalSection->Lock();
      }
      SceneCaptureComponent2D->CaptureSource = SCS_FinalColorHDR;
      SceneCaptureComponent2D->TextureTarget = RenderTarget2D;
      SceneCaptureComponent2D->CaptureScene();

      const auto Resource = RenderTarget2D->GameThread_GetRenderTargetResource();
      Resource->ReadPixels(CameraBuffer);
      CameraNeedsRefresh      = false;
      CameraDataNeedsCompress = true;

      if (!isExternallyLocked) {
        CameraBufferCriticalSection->Unlock();
      }
      break;
    }
    case CAMERA_MODE_DEPTH: {
      SceneCaptureComponent2D->CaptureSource = SCS_SceneDepth;
      SceneCaptureComponent2D->TextureTarget = RenderTargetDepth;
      SceneCaptureComponent2D->CaptureScene();
      if (!isExternallyLocked) {
        DepthBufferCriticalSection->Lock();
      }

      const auto ResourceDepth = RenderTargetDepth->GameThread_GetRenderTargetResource();
      ResourceDepth->ReadPixels(DepthBuffer);
      DepthDataNeedsCompress = true;

      if (!isExternallyLocked) {
        DepthBufferCriticalSection->Unlock();
      }
      break;
    }
    case CAMERA_MODE_SEG: {
      if (PostProcessMaterial) {
        SceneCaptureComponent2D->AddOrUpdateBlendable(PostProcessMaterial, 1);
      }
      SceneCaptureComponent2D->CaptureSource = SCS_FinalColorLDR;
      SceneCaptureComponent2D->TextureTarget = RenderTargetSeg;
      SceneCaptureComponent2D->CaptureScene();

      if (!isExternallyLocked) {
        SegBufferCriticalSection->Lock();
      }
      SceneCaptureComponent2D->AddOrUpdateBlendable(PostProcessMaterial, 0);
      const auto ResourceSeg = RenderTargetSeg->GameThread_GetRenderTargetResource();
      ResourceSeg->ReadPixels(SegBuffer);
      SegDataNeedsCompress = true;

      if (!isExternallyLocked) {
        SegBufferCriticalSection->Unlock();
      }
      break;
    }
    case CAMERA_MODE_COLOR_DEPTH: {
      SceneCaptureComponent2D->AddOrUpdateBlendable(DepthPostProcessMaterial, 1);
      SceneCaptureComponent2D->CaptureSource = SCS_FinalColorLDR;
      SceneCaptureComponent2D->TextureTarget = RenderTargetColDepth;
      SceneCaptureComponent2D->CaptureScene();
      if (!isExternallyLocked) {
        ColDepthBufferCriticalSection->Lock();
      }

      const auto ResourceColDepth = RenderTargetColDepth->GameThread_GetRenderTargetResource();
      ResourceColDepth->ReadPixels(ColDepthBuffer);
      ColorDepthDataNeedsCompress = true;

      if (!isExternallyLocked) {
        ColDepthBufferCriticalSection->Unlock();
      }
      SceneCaptureComponent2D->AddOrUpdateBlendable(DepthPostProcessMaterial, 0);
      break;
    }
    default: {
      SceneCaptureComponent2D->CaptureSource = SCS_FinalColorLDR;
      SceneCaptureComponent2D->TextureTarget = RenderTarget2D;
      break;
    }
  }
}

void ADronePawn::GetCameraDataFromServerThread(TArray<uint8>& OutArray) {
  CameraBufferCriticalSection->Lock();

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_DEMAND) {
    auto Instruction      = std::make_shared<FInstruction<ADronePawn>>();
    Instruction->Function = [](ADronePawn& _DronePawn) { _DronePawn.UpdateCamera(true, CAMERA_MODE_COLOR); };
    InstructionQueue->Enqueue(Instruction);
    FGenericPlatformProcess::ConditionalSleep([Instruction]() { return Instruction->Finished; });
  }

  if (CameraDataNeedsCompress) {
    FImageUtils::ThumbnailCompressImageArray(RenderTarget2D->SizeX, RenderTarget2D->SizeY, CameraBuffer, *CompressedCameraData);
    CameraDataNeedsCompress = false;
  }
  const auto Size = (*CompressedCameraData).Num();
  OutArray.SetNumUninitialized(Size);
  FMemory::Memcpy(OutArray.GetData(), (*CompressedCameraData).GetData(), Size * sizeof(uint8));

  CameraBufferCriticalSection->Unlock();
}
void ADronePawn::GetCameraDepthFromServerThread(TArray<uint8>& OutArray) {
  DepthBufferCriticalSection->Lock();

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_DEMAND) {
    auto Instruction      = std::make_shared<FInstruction<ADronePawn>>();
    Instruction->Function = [](ADronePawn& _DronePawn) { _DronePawn.UpdateCamera(true, CAMERA_MODE_DEPTH); };
    InstructionQueue->Enqueue(Instruction);
    FGenericPlatformProcess::ConditionalSleep([Instruction]() { return Instruction->Finished; });
  }


  if (DepthDataNeedsCompress) {
    /* Need to convert the DepthBuffer from FFloat16Color to FColor */
    TArray<FColor> DepthBufferFColor;
    DepthBufferFColor.SetNumUninitialized(DepthBuffer.Num());
    for (int i = 0; i < DepthBuffer.Num(); i++) {
      FColor fcolor = DepthBuffer[i];
      /*   /1* uint8         GrayScale     = FMath::Clamp(uint8(Float16Color.R / 65535.0f * 255.0f), 0, 255); *1/ */
      /*   float MaxDepth      = 50.0f;   // Example RealSense maximum depth */
      /*   float MinDepth      = 255.0f;  // Example CameraBuffer maximum depth */
      /*   float scalingFactor = MaxDepth / MinDepth; */
      /*   uint8 depth         = (uint8)(FMath::Clamp(Float16Color.R * scalingFactor, 0.0f, 255.0f)); */

      DepthBufferFColor[i] = FColor(fcolor.R, fcolor.R, fcolor.R, 255);
      /*   /1* log the r g b values *1/ */
      /*   UE_LOG(LogTemp, Warning, TEXT("R: %d, G: %d, B: %d"), uint16(Float16Color.R), uint16(Float16Color.G), uint16(Float16Color.B)); */
    }
    FImageUtils::ThumbnailCompressImageArray(RenderTargetDepth->SizeX, RenderTargetDepth->SizeY, DepthBufferFColor, *CompressedDepthData);
    DepthDataNeedsCompress = false;
  }
  const auto Size = (*CompressedDepthData).Num();
  OutArray.SetNumUninitialized(Size);
  FMemory::Memcpy(OutArray.GetData(), (*CompressedDepthData).GetData(), Size * sizeof(uint8));

  DepthBufferCriticalSection->Unlock();
}

void ADronePawn::GetCameraSegFromServerThread(TArray<uint8>& OutArray) {
  SegBufferCriticalSection->Lock();

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_DEMAND) {
    auto Instruction      = std::make_shared<FInstruction<ADronePawn>>();
    Instruction->Function = [](ADronePawn& _DronePawn) { _DronePawn.UpdateCamera(true, CAMERA_MODE_SEG); };
    InstructionQueue->Enqueue(Instruction);
    FGenericPlatformProcess::ConditionalSleep([Instruction]() { return Instruction->Finished; });
  }

  if (SegDataNeedsCompress) {
    FImageUtils::ThumbnailCompressImageArray(RenderTargetSeg->SizeX, RenderTarget2D->SizeY, SegBuffer, *CompressedSegData);
    SegDataNeedsCompress = false;
  }
  const auto Size = (*CompressedSegData).Num();
  OutArray.SetNumUninitialized(Size);
  FMemory::Memcpy(OutArray.GetData(), (*CompressedSegData).GetData(), Size * sizeof(uint8));

  CameraBufferCriticalSection->Unlock();
}

void ADronePawn::GetCameraColorDepthFromServerThread(TArray<uint8>& OutArray) {
  ColDepthBufferCriticalSection->Lock();

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_DEMAND) {
    auto Instruction      = std::make_shared<FInstruction<ADronePawn>>();
    Instruction->Function = [](ADronePawn& _DronePawn) { _DronePawn.UpdateCamera(true, CAMERA_MODE_COLOR_DEPTH); };
    InstructionQueue->Enqueue(Instruction);
    FGenericPlatformProcess::ConditionalSleep([Instruction]() { return Instruction->Finished; });
  }

  if (ColorDepthDataNeedsCompress) {
    FImageUtils::ThumbnailCompressImageArray(RenderTargetColDepth->SizeX, RenderTargetColDepth->SizeY, ColDepthBuffer, *CompressedColorDepthData);
    ColorDepthDataNeedsCompress = false;
  }
  const auto Size = (*CompressedColorDepthData).Num();
  OutArray.SetNumUninitialized(Size);
  FMemory::Memcpy(OutArray.GetData(), (*CompressedColorDepthData).GetData(), Size * sizeof(uint8));

  CameraBufferCriticalSection->Unlock();
}

void ADronePawn::SetCameraCaptureMode(CameraCaptureModeEnum CaptureMode) {
  CameraCaptureMode = CaptureMode;

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ALL_FRAMES || CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_MOVEMENT) {
    UpdateCamera(true, CAMERA_MODE_COLOR);
  }
}

FLidarConfig ADronePawn::GetLidarConfig() {
  return LidarConfig;
}

bool ADronePawn::SetLidarConfig(const FLidarConfig& Config) {
  LidarHitsCriticalSection->Lock();
  LidarSegHitsCriticalSection->Lock();
  LidarConfig.Enable     = Config.Enable;
  LidarConfig.ShowBeams  = Config.ShowBeams;
  LidarConfig.BeamLength = Config.BeamLength;
  if(Config.BeamHorRays > 0 && Config.BeamVertRays > 0) {
    LidarConfig.BeamHorRays  = Config.BeamHorRays;
    LidarConfig.BeamVertRays = Config.BeamVertRays;
  } else {
    UE_LOG(LogTemp, Warning, TEXT("Invalid dimensions for Lidar. BeamHorRays and BeamVertRays should be greater than 0."));
  }

  LidarConfig.Frequency = Config.Frequency;

  LidarConfig.Offset.X = Config.Offset.X;
  LidarConfig.Offset.Y = Config.Offset.Y;
  LidarConfig.Offset.Z = Config.Offset.Z;

  LidarConfig.Orientation.Pitch = Config.Orientation.Pitch;
  LidarConfig.Orientation.Yaw   = Config.Orientation.Yaw;
  LidarConfig.Orientation.Roll  = Config.Orientation.Roll;

  LidarConfig.FOVHor  = Config.FOVHor;
  LidarConfig.FOVVert = Config.FOVVert;

  LidarConfig.vertRayDiff = (double) LidarConfig.FOVVert/ (double)(LidarConfig.BeamVertRays - 1.0);
  LidarConfig.horRayDif   = (double) LidarConfig.FOVHor / (double)LidarConfig.BeamHorRays;
  
  LidarHits->resize(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  LidarSegHits->resize(LidarConfig.BeamHorRays * LidarConfig.BeamVertRays);
  LidarHitsCriticalSection->Unlock();
  LidarSegHitsCriticalSection->Unlock();
  return true;
}

FCameraConfig ADronePawn::GetCameraConfig() {
  FCameraConfig CameraConfig;

  CameraConfig.ShowCameraComponent = SceneCaptureMeshHolder->IsVisible();

  CameraConfig.Offset      = SceneCaptureMeshHolder->GetRelativeLocation();
  CameraConfig.Orientation = SceneCaptureMeshHolder->GetRelativeRotation();
  CameraConfig.FOVAngle    = SceneCaptureComponent2D->FOVAngle;
  CameraConfig.Width       = RenderTarget2D->SizeX;
  CameraConfig.Height      = RenderTarget2D->SizeY;
  return CameraConfig;
}

bool ADronePawn::SetCameraConfig(const FCameraConfig& Config) {
  CameraBufferCriticalSection->Lock();
  DepthBufferCriticalSection->Lock();
  SegBufferCriticalSection->Lock();
  ColDepthBufferCriticalSection->Lock();

  SceneCaptureMeshHolder->SetVisibility(Config.ShowCameraComponent);

  SceneCaptureMeshHolder->SetRelativeLocation(Config.Offset);
  SceneCaptureMeshHolder->SetRelativeRotation(FRotator(0, 0, 0));
  SceneCaptureMeshHolder->SetRelativeRotation(Config.Orientation);
  SceneCaptureComponent2D->FOVAngle = Config.FOVAngle;
  if (Config.Width > 0 && Config.Height > 0) {
    /* RenderTarget2D->UpdateResourceImmediate(false); */
    /* RenderTargetDepth->UpdateResourceImmediate(false); */
    /* RenderTargetSeg->UpdateResourceImmediate(false); */
    /* RenderTargetColDepth->UpdateResourceImmediate(false); */
    RenderTarget2D->ResizeTarget(Config.Width, Config.Height);
    RenderTargetDepth->ResizeTarget(Config.Width, Config.Height);
    RenderTargetSeg->ResizeTarget(Config.Width, Config.Height);
    RenderTargetColDepth->ResizeTarget(Config.Width, Config.Height);
  } else {

    UE_LOG(LogTemp, Warning, TEXT("Invalid dimensions for RenderTarget2D. Width and Height should be greater than 0."));
  }
  CameraNeedsRefresh = true;

  CameraBufferCriticalSection->Unlock();
  DepthBufferCriticalSection->Unlock();
  SegBufferCriticalSection->Unlock();
  ColDepthBufferCriticalSection->Unlock();
  return true;
}

void ADronePawn::SetLocation(FVector& Location, FVector& TeleportedToLocation, bool CheckCollisions, FHitResult& HitResult) {
  bool DrawLine      = DrawMovementLine;
  auto StartLocation = DrawLine ? GetActorLocation() : FVector();

  SetActorLocation(Location, CheckCollisions, &HitResult);
  TeleportedToLocation = CheckCollisions ? GetActorLocation() : Location;

  if (DrawLine) {
    DrawDebugLine(GetWorld(), StartLocation, TeleportedToLocation, FColor::Green, true, -1, 0, 3);
  }
}

void ADronePawn::Tick(float DeltaSeconds) {
  if (LidarConfig.ShowBeams) {
    // We must update Lidar each frame in order to see beams
    UpdateLidar(false);
    UpdateSegLidar(false);
  }

  std::shared_ptr<FInstruction<ADronePawn>> Instruction;
  while (InstructionQueue->Dequeue(Instruction)) {
    Instruction->Function(*this);
    Instruction->Finished = true;
  }

  if (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ALL_FRAMES || (CameraCaptureMode == CameraCaptureModeEnum::CAPTURE_ON_MOVEMENT && Instruction) ||
      CameraNeedsRefresh) {
    UpdateCamera(true, CAMERA_MODE_COLOR);
    UpdateCamera(true, CAMERA_MODE_DEPTH);
    UpdateCamera(true, CAMERA_MODE_SEG);
    UpdateCamera(true, CAMERA_MODE_COLOR_DEPTH);
  }

  Super::Tick(DeltaSeconds);
}
