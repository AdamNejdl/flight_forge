// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "Server/DroneServer.h"
#include "Instruction.h"

#include "GameFramework/Pawn.h"

#include "GameFramework/Actor.h"

#include "DronePawn.generated.h"

class USpringArmComponent;
class UCameraComponent;
class USceneCaptureComponent2D;
class UTextureRenderTarget2D;

#define DEFAULT_LIDAR_BEAM_HOR 256//100
#define DEFAULT_LIDAR_BEAM_VER 32//15

#define DEFAULT_LIDAR_BEAM_LENGTH 1000
/* #define DEFAULT_LIDAR_BEAM_HOR 2048 */
/* #define DEFAULT_LIDAR_BEAM_VER 128 */
#define DEFAULT_LIDAR_SHOW_BEAMS false

/* Enum for the camera capture type */
enum CameraMode {
  CAMERA_MODE_NONE = 0,
  CAMERA_MODE_COLOR = 1,
  CAMERA_MODE_DEPTH = 2,
  CAMERA_MODE_SEG = 3,
  CAMERA_MODE_COLOR_DEPTH = 4
};

struct FLidarConfig
{
	bool Enable;
  bool ShowBeams;
	double BeamLength;
	
	double BeamHorRays;
	double BeamVertRays;
	
  double Frequency;
	FVector Offset;
	FRotator Orientation;
  double FOVHor;
  double FOVVert;
  double vertRayDiff;
	double horRayDif;

  bool SemanticSegmentation;
};

struct FCameraConfig
{
	bool ShowCameraComponent;

	FVector Offset;
	FRotator Orientation;
	double FOVAngle;
  int Width;
  int Height;
};

using Serializable::GameMode::CameraCaptureModeEnum;

UCLASS()
class UEDS_API ADronePawn : public APawn
{
	GENERATED_BODY()

public:
	std::shared_ptr<DroneServer> droneServer;
	
	UPROPERTY(VisibleAnywhere, Category="Components")
	USpringArmComponent* ThirdPersonCameraSpringArm;

	UPROPERTY(VisibleAnywhere, Category="Components")
	UTextureRenderTarget2D* RenderTarget2D;
	
  UPROPERTY(VisibleAnywhere, Category="Components")
	UTextureRenderTarget2D* RenderTargetDepth;
  
  UPROPERTY(VisibleAnywhere, Category="Components")
	UTextureRenderTarget2D* RenderTargetSeg;
  
  UPROPERTY(VisibleAnywhere, Category="Components")
	UTextureRenderTarget2D* RenderTargetColDepth;
	
	UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite)
	UCameraComponent* ThirdPersonCamera;

	UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite)
	UCameraComponent* DroneCamera;

	UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite)
	UStaticMeshComponent* SceneCaptureMeshHolder;

	UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite)
	USceneCaptureComponent2D* SceneCaptureComponent2D;
	
  /* UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite) */
	/* USceneCaptureComponent2D* DepthSceneCaptureComponent2D; */

	// PostProcessMaterial used for segmentation
	UPROPERTY(EditAnywhere, Category="Segmentation PostProcess Setup")
	UMaterial* PostProcessMaterial = nullptr;
	
  // PostProcessMaterial used for depth
	UPROPERTY(EditAnywhere, Category="Color depth PostProcess Setup")
	UMaterial* DepthPostProcessMaterial = nullptr;

	UPROPERTY(VisibleAnywhere, Category="Components", BlueprintReadWrite)
	UStaticMeshComponent* RootMeshComponent;
	
	// Sets default values for this character's properties
	ADronePawn();

#if PLATFORM_WINDOWS
	std::unique_ptr<FWindowsCriticalSection> CameraBufferCriticalSection;
	std::unique_ptr<FWindowsCriticalSection> DepthBufferCriticalSection;
	std::unique_ptr<FWindowsCriticalSection> SegBufferCriticalSection;
	std::unique_ptr<FWindowsCriticalSection> ColDepthBufferCriticalSection;
#else
	std::unique_ptr<FPThreadsCriticalSection> CameraBufferCriticalSection;
	std::unique_ptr<FPThreadsCriticalSection> DepthBufferCriticalSection;
	std::unique_ptr<FPThreadsCriticalSection> SegBufferCriticalSection;
  std::unique_ptr<FPThreadsCriticalSection> ColDepthBufferCriticalSection;
#endif
	TArray<FColor> CameraBuffer;
  TArray<FColor> SemanticBuffer;
  TArray<FColor> DepthBuffer;
  TArray<FColor> SegBuffer; 
  TArray<FColor> ColDepthBuffer;
  std::unique_ptr<TQueue<std::shared_ptr<FInstruction<ADronePawn>>>> InstructionQueue;

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;

public:	
	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	void StartServer();

	void GetLidarHits(std::vector<Serializable::Drone::GetLidarData::LidarData>& OutLidarData, FVector& OutStart);
	
  void GetSegLidarHits(std::vector<Serializable::Drone::GetLidarSegData::LidarSegData>& OutLidarSegData, FVector& OutStart);

	void GetCameraDataFromServerThread(TArray<uint8>& OutArray);
	
  void GetCameraDepthFromServerThread(TArray<uint8>& OutArray);
  
  void GetCameraSegFromServerThread(TArray<uint8>& OutArray);
  
  void GetCameraColorDepthFromServerThread(TArray<uint8>& OutArray);

	void SetCameraCaptureMode(CameraCaptureModeEnum CaptureMode);

	FLidarConfig GetLidarConfig();
	bool SetLidarConfig(const FLidarConfig& Config);

	FCameraConfig GetCameraConfig();
	bool SetCameraConfig(const FCameraConfig& Config);

	void SetLocation(FVector& Location, FVector& TeleportedToLocation, bool CheckCollisions, FHitResult& HitResult);

	bool DrawMovementLine = false;
	
private:
  void Tick(float DeltaSeconds) override;

	void UpdateLidar(bool isExternallyLocked);
	
  void UpdateSegLidar(bool isExternallyLocked);

	void UpdateCamera(bool isExternallyLocked, int type);

#if PLATFORM_WINDOWS
	std::unique_ptr<FWindowsCriticalSection> LidarHitsCriticalSection;
	std::unique_ptr<FWindowsCriticalSection> LidarSegHitsCriticalSection;
#else
	std::unique_ptr<FPThreadsCriticalSection> LidarHitsCriticalSection;
	std::unique_ptr<FPThreadsCriticalSection> LidarSegHitsCriticalSection;
#endif
	std::unique_ptr<std::vector<std::tuple<double, double, double, double>>> LidarHits;
	std::unique_ptr<std::vector<std::tuple<double, double, double, double, int>>> LidarSegHits;
	std::unique_ptr<FVector> LidarHitStart;


	CameraCaptureModeEnum CameraCaptureMode = CameraCaptureModeEnum::CAPTURE_ON_DEMAND;

	FLidarConfig LidarConfig;
	bool CameraNeedsRefresh = false;
	
  std::unique_ptr<TArray<uint8>> CompressedCameraData = std::make_unique<TArray<uint8>>();
	std::unique_ptr<TArray<uint8>> CompressedSegData = std::make_unique<TArray<uint8>>();
	std::unique_ptr<TArray<uint8>> CompressedDepthData = std::make_unique<TArray<uint8>>();
	std::unique_ptr<TArray<uint8>> CompressedColorDepthData = std::make_unique<TArray<uint8>>();

	bool CameraDataNeedsCompress = false;
  bool DepthDataNeedsCompress = false;
  bool SegDataNeedsCompress = false;
  bool ColorDepthDataNeedsCompress = false;
};
